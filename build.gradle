buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://dl.bintray.com/jetbrains/intellij-plugin-service" }
    }
    dependencies {
        classpath("org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.5.0-SNAPSHOT")
    }
}
plugins {
    id "nebula.dependency-lock" version "5.0.2"
    id "org.jetbrains.intellij" version "0.4.9"
    id "org.jetbrains.kotlin.jvm" version "1.3.20"
}
apply plugin: "java"
apply plugin: "groovy"
apply plugin: "idea"
apply plugin: "org.jetbrains.intellij"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    ivy {
        layout "pattern"
        artifactPattern "http://raw.githubusercontent.com/dkandalov/kotlin-compiler-wrapper/master/jars/[organisation]-[artifact]-[revision](-[classifier])(.[ext])"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}
ext.kotlinVersion = "1.3.20"

intellij {
    // (to find available IDE versions see https://www.jetbrains.com/intellij-repository/releases)
    def ideVersion = "191.6183.87" // Because of "import kotlin.script.experimental.*" classes
    println("Using ide version: ${ideVersion}")
    version ideVersion
    // The artifact name is deliberately not "live-plugin" because plugins are stored in the "live-plugins" directory.
    // The "LivePlugin" directory is deleted on each plugin update so it's good make it distinct from "live-plugins".
    pluginName = "KafkaPlugin"
    downloadSources = true
    sameSinceUntilBuild = false
    updateSinceUntilBuild = false
    plugins = ["Groovy", "Kotlin", "git4idea", "github", "junit"]
}
dependencyLock {
    lockFile = "../dependencyLock.json"
    configurationNames = ["runtime"]
    includeTransitives = true
}

dependencies {
    runtime group: "org.jetbrains.kotlin", name: "kotlin-compiler-embeddable", version: kotlinVersion
    runtime group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlinVersion
    runtime group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlinVersion
    runtime group: "live-plugin", name: "kotlin-compiler-wrapper", version: "0.1.2"

    testCompile group: "junit", name: "junit", version: "4.12" // includes hamcrest-core
}

"Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"()

sourceSets {
    // Keep groovy and kotlin util source code in separate source sets, otherwise
    // compilation fails because of inter-dependencies between kotlin and groovy files which confuse compiler,
    // even though overall dependencies are unidirectional:
    // pluginUtilKotlin -> pluginUtilGroovy -> main

    main {
        java { srcDir "src/main" }
        resources { srcDir "resources" }
    }
    test {
        groovy { srcDir "src/test" }
        compileClasspath = main.output + configurations.testCompileClasspath
        runtimeClasspath = test.output + main.output + configurations.testRuntimeClasspath
    }
}

build.finalizedBy(saveLock)

def "Move kotlin compiler jars from plugin classpath into a separate folder so that there are no conflicts between kotlin and intellij classes"() {
    // Remove kotlin version from jars zipped with plugin so that when they are updated, 'LivePlugin' module dependencies are still correct.
    def filesToMove = [
            ["kotlin-compiler-wrapper-0.1.2.jar", "kotlin-compiler-wrapper.jar"],
            ["kotlin-compiler-embeddable-${kotlinVersion}.jar", "kotlin-compiler-embeddable.jar"],
            ["kotlin-reflect-${kotlinVersion}.jar", "kotlin-reflect.jar"],
            ["kotlin-stdlib-${kotlinVersion}.jar", "kotlin-stdlib.jar"],
            ["kotlin-stdlib-common-${kotlinVersion}.jar", "kotlin-stdlib-common.jar"],
            ["kotlin-script-runtime-${kotlinVersion}.jar", "kotlin-script-runtime.jar"],
            ["trove4j-1.0.20181211.jar", "trove4j.jar"]
    ]
    prepareSandbox.doLast {
        filesToMove.each {
            ant.move(
                    file: "build/idea-sandbox/plugins/KafkaPlugin/lib/${it[0]}",
                    tofile: "build/idea-sandbox/plugins/KafkaPlugin/kotlin-compiler/${it[1]}"
            )
        }
    }
}
